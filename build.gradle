plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "io.freefair.lombok" version "5.0.1"
    id 'pmd'
    // tests
    id 'groovy'
    id 'jacoco'
    id 'com.bmuschko.docker-remote-api' version '6.4.0'
}

group = 'com.jvmops'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '14'
targetCompatibility = '14'

ext {
    spockVersion = '1.3-groovy-2.5'
    testcontainersVersion = '1.14.3'
    testcontainersEmbeddedMongoVersion = '1.71'
    springCloudVersion = 'Hoxton.SR4'
}

bootJar {
    enabled = false
}

// Java 14, new switch, records, NullPointer messages!

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    // TODO: extract this map... but where?
    jvmArgs += [
            '--enable-preview',
            '-XX:+ShowCodeDetailsInExceptionMessages'
    ]
}

tasks.withType(JavaExec) {
    jvmArgs += [
            '--enable-preview',
            '-XX:+ShowCodeDetailsInExceptionMessages'
    ]
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'com.bmuschko.docker-remote-api'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // tests

        testImplementation "org.spockframework:spock-core:$spockVersion"
        testImplementation "org.spockframework:spock-spring:$spockVersion"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // testcontainers is an object api for docker - I find it useful and fast for integration tests
        testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
        testImplementation "com.playtika.testcontainers:embedded-mongodb:$testcontainersEmbeddedMongoVersion"
        testImplementation "org.springframework.cloud:spring-cloud-starter"
    }

     // Tests

    jacocoTestReport {
        reports {
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            csv.enabled false
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.3
                }
            }
        }
    }

    tasks.withType(Test) {
        jvmArgs += "-Djdk.module.illegalAccess=deny"
    }

    test {
        useJUnitPlatform()

        failFast = true

        // extensive docker and spring logging
        testLogging.showStandardStreams = false

        // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
        testLogging {
            events "passed", "skipped", "failed"
        }

        afterSuite { desc, result ->
            if (!desc.parent)
                println("${result.resultType} " +
                        "(${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)")
        }
    }

    check.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}
